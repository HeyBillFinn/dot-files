set -o vi
export EDITOR=vim

PERSISTENT_HISTORY_FILE="$HOME/dot-files/.persistent_history"
HISTTIMEFORMAT="%F %T "
log_bash_persistent_history()
{
  [[
  $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$
  ]]
  local date_part="${BASH_REMATCH[1]}"
  local command_part="${BASH_REMATCH[2]}"
  if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ] && \
    [[ $command_part != "phgrep "* ]]
  then
    if [[ $command_part == "ph "* ]]
    then
      parsed_command=$(echo $command_part | awk '{print $2}')
      command_part=$(_ph_get_command $parsed_command)
    fi
    echo $date_part "|" $HOSTNAME "|" $PWD "|" "$command_part" >> $PERSISTENT_HISTORY_FILE
    export PERSISTENT_HISTORY_LAST="$command_part"
  fi
}

# Stuff to do on PROMPT_COMMAND
run_on_prompt_command()
{
  log_bash_persistent_history
}

_ph_get_command()
{
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters"
  else
    if ! [[ $1 =~ ^-?[0-9]+$ ]]; then
      echo "Illegal non-integer argument."
    else
      command=`sed "$1!d" $PERSISTENT_HISTORY_FILE | awk -F "|" '{print $4}'`
      echo $command
    fi
  fi
}

ph()
{
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters"
  else
    command=$(_ph_get_command $1)
    echo $command
    eval $command
  fi
}

phe()
{
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters"
  else
    command=$(_ph_get_command $1)
    echo $command
  fi
}

gitmv()
{
  git grep -l $1 | xargs sed -i "s/$1/$2/g"
}

gitpushtmp()
{
  branchName=$(git rev-parse --abbrev-ref HEAD)
  if ! [[ $branchName =~ ^dev.*$ ]]; then
    echo "error: not on dev branch"
    return 1
  fi
  tmpBranchName=$(echo $branchName | sed 's/^dev/tmp/')
  branchExists=$(git rev-parse --verify $tmpBranchName 2>/dev/null)
  if [[ -z $branchExists ]]; then
    echo "branch $tmpBranchName doesn't exist; creating"
    git branch $tmpBranchName
  fi
  echo "updating $tmpBranchName to $branchName"
  git branch -f $tmpBranchName $branchName
  echo "force pushing $tmpBranchName"
  if ! [[ $tmpBranchName =~ ^tmp.*$ ]]; then
    echo "error: tmp branch incorrectly formatted"
    return 1
  fi
  git push -u origin $tmpBranchName -f
}

alias nt='nosetests -s --with-progressive'

PROMPT_COMMAND="run_on_prompt_command"
#  \*(Ps = \*3\*0 \(-> Set foreground color to Black.
#  \*(Ps = \*3\*1 \(-> Set foreground color to Red.
#  \*(Ps = \*3\*2 \(-> Set foreground color to Green.
#  \*(Ps = \*3\*3 \(-> Set foreground color to Yellow.
#  \*(Ps = \*3\*4 \(-> Set foreground color to Blue.
#  \*(Ps = \*3\*5 \(-> Set foreground color to Magenta.
#  \*(Ps = \*3\*6 \(-> Set foreground color to Cyan.
#  \*(Ps = \*3\*7 \(-> Set foreground color to White.
#  \*(Ps = \*3\*9 \(-> Set foreground color to default (original).
#  \*(Ps = \*4\*0 \(-> Set background color to Black.
#  \*(Ps = \*4\*1 \(-> Set background color to Red.
#  \*(Ps = \*4\*2 \(-> Set background color to Green.
#  \*(Ps = \*4\*3 \(-> Set background color to Yellow.
#  \*(Ps = \*4\*4 \(-> Set background color to Blue.
#  \*(Ps = \*4\*5 \(-> Set background color to Magenta.
#  \*(Ps = \*4\*6 \(-> Set background color to Cyan.
#  \*(Ps = \*4\*7 \(-> Set background color to White.
#  \*(Ps = \*4\*9 \(-> Set background color to default (original).

if [[ $HOSTNAME == "vagrant"* ]]
then
  PS1="\[\033[37m\]\t\[\033[m\]-\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\]\$ "
fi
alias phgrep='cat $PERSISTENT_HISTORY_FILE|grep --color -n'
alias ag='ack-grep --ignore-dir dist --ignore-file=ext:patch'
alias agt='find . -name "*.py" -type f | xargs ls -tr1 | xargs ag '
alias k='fc -s'
alias gchrome='google-chrome --high-dpi-support=1 --force-device-scale-factor=1 > /dev/null 2>&1 &'
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

alias gpush='git push -u origin HEAD'
alias gmaster='git checkout master && git pull'
alias grebase='git checkout master && git pull && git checkout - && git rebase master'
alias gamend='git commit --amend --no-edit'
alias src='source ~/.bashrc'
# Consider using --jobs or --single-transaction or setting the maintenance memory higher
alias pgrestoreprodsnapshot='dropdb za_prod_pristine; createdb za_prod_pristine && echo "restoring" && pg_restore --no-acl --no-owner -d za_prod_pristine `ls -1t *.dump | head -n 1`'
# alias pgrestoreschemaonly='dropdb za_prod_schema; createdb za_prod_schema && pg_restore --schema-only --no-acl --no-owner -d za_prod_schema `ls -1t *.dump | head -n 1` && pg_restore --table=alembic_version --data-only --no-acl --no-owner -d za_prod_schema `ls -1t *.dump | head -n 1`'
alias alembicc='alembic -c ~/Projects/Angaza/alembic.ini '
alias alembichistory='alembicc history | less'
alias alembichead='alembicc upgrade head'
alias prodsnapshot='fab world_db_snapshot:production,restore_to=za_prod_pristine'
alias proddb='export ZA_PROD_DATABASE_URI=`heroku config:get DATABASE_URL --app=angaza-production`'
#alias sshprod='ec2-ssh `fab group_list_all | grep production__biz | cut -d '"'"' '"'"' -f 1`'
alias sshprod='ec2-ssh `fab group_list_all:production | grep "^production__biz" | awk "{print $1}"`'
alias scpprod='ec2-host `fab group_list_all:production | grep "^production__biz" | awk "{print $1}"`'
alias f8='flake8 --show-source --config=flake8.ini za'
alias vssh='vagrant ssh'
alias api='ZA_CELERY_BROKER_URL=amqp://guest@localhost:5672 DATABASE_URI=postgres:///za_prod_snapshot za-serve-gunicorn biz_api:/api'
alias apidemo='DATABASE_URI=postgres:///za_sandbox; za-serve-gunicorn biz_api:/api'
alias celerydemo='celery purge -f && AWS_ACCESS_KEY_ID=`cat ~/Projects/Angaza/variables.deploy/AWS_ACCESS_KEY_ID` AWS_SECRET_ACCESS_KEY=`cat ~/Projects/Angaza/variables.deploy/AWS_SECRET_ACCESS_KEY` DATABASE_URI=postgres:///za_sandbox celery --app=za worker --loglevel=INFO --concurrency=1 -Q celery,batch 2>&1 | tee ~/celery.log'
alias celeryprodbeat='ZA_CELERY_BROKER_URL=amqp://guest@localhost:5672 DATABASE_URI=postgres:///za_prod_snapshot celery --app=za beat --loglevel=INFO'
alias zapsqlsnapshot='za-psql -u bill@angazadesign.com -p asdfg postgres:///za_prod_snapshot'
alias zapsqlprod='za-psql -u bill@angazadesign.com -p asdfg `heroku config:get DATABASE_URL --app=angaza-production`'
alias zs='za-psql -u bill@angazadesign.com -p asdfg postgres:///za_prod_snapshot -s '
alias groups='psql -d za_prod_snapshot -c "select id,name from groups"'
alias orgs='psql -d za_prod_snapshot -c "select id,name from organizations"'
alias users='psql -d za_prod_snapshot -c "select u.id,username,o.name,r.name,u.archived from users u inner join organizations o on u.organization_id=o.id inner join roles r on u.role_id=r.id"'
alias utcdate='date -u +%Y%m%dT%H%M%SZ'
alias isodate='date -u +%Y-%m-%dT%H:%M:%SZ'
alias justdate='date +%Y-%m-%d'
alias filenamedate='date +%Y-%m-%d_%H%M%SZ'
alias fabwheelupload='fab wheelhouse_upload:`ls -m ~/Projects/Angaza/payg-backend/*.whl | tr -d " " | tr -d "\n"`'
stty -ixon
export VIRTUAL_ENV_DISABLE_PROMPT=1

prodfork()
{
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters"
  else
    export ZA_PROD_FORK=`heroku config:get $1 --app=angaza-production`
    echo "ZA_PROD_FORK=$ZA_PROD_FORK"
  fi
}

celeryprod()
{
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters"
  else
    echo "rabbitmqadmin purge queue name=$1; celery purge -f && ZA_CELERY_BROKER_URL=amqp://guest@localhost:5672 DATABASE_URI=postgres:///za_prod_snapshot celery --app=za worker --hostname=$1 --loglevel=INFO --concurrency=1 --queues=$1 -Ofair 2>&1"
    rabbitmqadmin purge queue name=$1; celery purge -f && ZA_CELERY_BROKER_URL=amqp://guest@localhost:5672 DATABASE_URI=postgres:///za_prod_snapshot celery --app=za worker --hostname=$1 --loglevel=INFO --concurrency=1 --queues=$1
  fi
}

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi
shopt -s autocd
export CDPATH=.:~:~/Projects/Angaza

unregistered_unit()
{
  psql -d za_prod_snapshot -c "select default_account_number from units u left outer join accounts a on a.attached_unit_id=u.id where u.type='$1' and a.id is null order by u.id desc limit 5"
}
zabill()
{
  cat << EOF
envdir variables/ za-psql -u bill@angazadesign.com \`cat ~/variables/DATABASE_URI\`

select pid,client_addr,client_port,query_start,substr(query, 20),state from pg_stat_activity where state != 'idle' order by query_start;

select pid,application_name,client_addr,client_port,query_start,substr(query, 1, 50),state from pg_stat_activity where state != 'idle' order by query_start;

select "time",duration,culprit from sql_queries where "time" > '2017-06-21 14:19:11'::timestamp and "time" < '2017-06-21 14:19:23' and process = 2088 order by 1;

from multiprocessing import Pool
import subprocess

def f(x):
    return subprocess.check_output(["fab", "group_delete:{}".format(x)])

p = Pool(5)
print(p.map(f, ["production__biz-20170804224549", "production__biz-20170808040138"]))

# Convert fields to autovalue
%s/final/abstract
%s/;/();/

# Convert auto-value functions to builder
%s/public abstract \(\S*\) \(\S*\)();/public abstract Builder \2\(\1 \2);
g/Nullable/d
g/SerializedName/d

sqlite3 /data/data/com.angazadesign.agent/databases/za-lite.db


select generated_at,json_extract_path_text(regexp_replace(message, '.*telemetry report; '), 'events-sms-low-prio') from system_log_lines where message like '%telemetry report;%' and generated_at > sysdate - '7 days'::interval order by 1;

EOF
}
