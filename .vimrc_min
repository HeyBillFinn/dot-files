nnoremap : ;
nnoremap ; :

function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (0 == match(a:key,'[jk]')) "were we going up/down
      exec "sp"
      if (0 == match(a:key, 'j'))
          exec "wincmd j"
      else
          exec "wincmd k"
      endif
    else
      exec "vsp"
      if (0 == match(a:key, 'l'))
          exec "wincmd l"
      else
          exec "wincmd h"
      endif
    endif
    "exec "wincmd ".a:key
  endif
endfunction

nnoremap <silent> ,h :call WinMove('h')<cr>
nnoremap <silent> ,k :call WinMove('k')<cr>
nnoremap <silent> ,l :call WinMove('l')<cr>
nnoremap <silent> ,j :call WinMove('j')<cr>
nnoremap ,= <c-w>=
nnoremap ,o <c-w>o

function! CopyTest()
  normal ma[[w"cye`a
  ?^    def test
  normal w"tye`a
  let @+ = @% . ':' . @c . '.' . @t
endfunction

nnoremap <silent> ,t :call CopyTest()<cr>
nnoremap <silent> ,P :let @+=expand("%:p")<CR>

function! CopyMethod()
  normal ma[[w"cye`a
  ?^    def
  normal w"tye`a
  let @+ = @c . '.' . @t
endfunction

nnoremap <silent> ,m :call CopyMethod()<cr>

nmap ,q <c-w>q

nmap - O<esc>
nmap _ o<esc>

syntax on
colorscheme darkblue

set expandtab
set shiftwidth=2
set tabstop=2

set backupdir=$TEMP,$TMP,.
set directory=$TEMP,$TMP,/tmp//,/var//tmp,.

set number

nnoremap S :let @0 = substitute(@0, "\\s\\+$","","g")<cr>ea<space><esc>bdiw"0Plxb
vnoremap S "0p

set autoindent

set wildmode=longest,list,full
set wildmenu
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc

nnoremap v V
nnoremap V v

set incsearch
set hlsearch
set ignorecase
set smartcase

nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" cabbr trim %s/\s\+$//e
autocmd FileType conf,xml,java,vim,c,cpp,java,php,ruby,python,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType xml,python,javascript,html,java,c setlocal shiftwidth=4 tabstop=4

set backspace=indent,eol,start
cabbr src source ~/.vimrc
cabbr sqlformat %!sqlformat --reindent --keywords upper --identifiers lower -
" nnoremap ,r :silent exec system('isort -sl ' . expand("%:p") . ' > /dev/null && autoflake --remove-all-unused-imports --in-place ' . expand("%:p") . ' > /dev/null && isort ' . expand("%:p") . ' > /dev/null')<cr>

set listchars=tab:▸\ ,trail:·
set list
set relativenumber

nnoremap <C-N><C-N> :set invnumber<CR>:set invrelativenumber<CR>

vnoremap Y "+y
nnoremap Y "+y
" nnoremap ,p "+p
nnoremap ,<c-v> :set paste!<cr>

nnoremap n nzz
nnoremap N Nzz


nnoremap ,z :silent exec system('za-fix-style ' . expand("%:p") . ' > /dev/null') <Bar> e <cr>

nnoremap <c-j> :m .+1<CR>
nnoremap <c-k> :m .-2<CR>
inoremap <c-j> <Esc>:m .+1<CR>gi
inoremap <c-k> <Esc>:m .-2<CR>gi
vnoremap <c-j> :m '>+1<CR>gv=gv
vnoremap <c-k> :m '<-2<CR>gv=gv

" Used by watchmedo, so only one event triggers per save
set nobackup
set nowritebackup
set backupcopy=no

" let &colorcolumn=join(range(81,999),",")
highlight ColorColumn ctermbg=9
nnoremap <silent> ,[
      \ :if !exists('w:long_line_match') <Bar>
      \   silent! execute "set colorcolumn=" . join(range(81,335), ',') <Bar>
      \   let w:long_line_match = 'true' <Bar>
      \ else <Bar>
      \   silent! execute "set colorcolumn=0" <Bar>
      \   unlet w:long_line_match <Bar>
      \ endif<CR>

set laststatus=2
set colorcolumn=80
